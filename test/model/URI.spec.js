/*
 * Recomax REST API
 * Recomax REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@recomax.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RecomaxRestApi);
  }
}(this, function(expect, RecomaxRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('URI', function() {
      beforeEach(function() {
        instance = new RecomaxRestApi.URI();
      });

      it('should create an instance of URI', function() {
        // TODO: update the code to test URI
        expect(instance).to.be.a(RecomaxRestApi.URI);
      });

      it('should have the property absolute (base name: "absolute")', function() {
        // TODO: update the code to test the property absolute
        expect(instance).to.have.property('absolute');
        // expect(instance.absolute).to.be(expectedValueLiteral);
      });

      it('should have the property authority (base name: "authority")', function() {
        // TODO: update the code to test the property authority
        expect(instance).to.have.property('authority');
        // expect(instance.authority).to.be(expectedValueLiteral);
      });

      it('should have the property fragment (base name: "fragment")', function() {
        // TODO: update the code to test the property fragment
        expect(instance).to.have.property('fragment');
        // expect(instance.fragment).to.be(expectedValueLiteral);
      });

      it('should have the property host (base name: "host")', function() {
        // TODO: update the code to test the property host
        expect(instance).to.have.property('host');
        // expect(instance.host).to.be(expectedValueLiteral);
      });

      it('should have the property opaque (base name: "opaque")', function() {
        // TODO: update the code to test the property opaque
        expect(instance).to.have.property('opaque');
        // expect(instance.opaque).to.be(expectedValueLiteral);
      });

      it('should have the property path (base name: "path")', function() {
        // TODO: update the code to test the property path
        expect(instance).to.have.property('path');
        // expect(instance.path).to.be(expectedValueLiteral);
      });

      it('should have the property port (base name: "port")', function() {
        // TODO: update the code to test the property port
        expect(instance).to.have.property('port');
        // expect(instance.port).to.be(expectedValueLiteral);
      });

      it('should have the property query (base name: "query")', function() {
        // TODO: update the code to test the property query
        expect(instance).to.have.property('query');
        // expect(instance.query).to.be(expectedValueLiteral);
      });

      it('should have the property rawAuthority (base name: "rawAuthority")', function() {
        // TODO: update the code to test the property rawAuthority
        expect(instance).to.have.property('rawAuthority');
        // expect(instance.rawAuthority).to.be(expectedValueLiteral);
      });

      it('should have the property rawFragment (base name: "rawFragment")', function() {
        // TODO: update the code to test the property rawFragment
        expect(instance).to.have.property('rawFragment');
        // expect(instance.rawFragment).to.be(expectedValueLiteral);
      });

      it('should have the property rawPath (base name: "rawPath")', function() {
        // TODO: update the code to test the property rawPath
        expect(instance).to.have.property('rawPath');
        // expect(instance.rawPath).to.be(expectedValueLiteral);
      });

      it('should have the property rawQuery (base name: "rawQuery")', function() {
        // TODO: update the code to test the property rawQuery
        expect(instance).to.have.property('rawQuery');
        // expect(instance.rawQuery).to.be(expectedValueLiteral);
      });

      it('should have the property rawSchemeSpecificPart (base name: "rawSchemeSpecificPart")', function() {
        // TODO: update the code to test the property rawSchemeSpecificPart
        expect(instance).to.have.property('rawSchemeSpecificPart');
        // expect(instance.rawSchemeSpecificPart).to.be(expectedValueLiteral);
      });

      it('should have the property rawUserInfo (base name: "rawUserInfo")', function() {
        // TODO: update the code to test the property rawUserInfo
        expect(instance).to.have.property('rawUserInfo');
        // expect(instance.rawUserInfo).to.be(expectedValueLiteral);
      });

      it('should have the property scheme (base name: "scheme")', function() {
        // TODO: update the code to test the property scheme
        expect(instance).to.have.property('scheme');
        // expect(instance.scheme).to.be(expectedValueLiteral);
      });

      it('should have the property schemeSpecificPart (base name: "schemeSpecificPart")', function() {
        // TODO: update the code to test the property schemeSpecificPart
        expect(instance).to.have.property('schemeSpecificPart');
        // expect(instance.schemeSpecificPart).to.be(expectedValueLiteral);
      });

      it('should have the property userInfo (base name: "userInfo")', function() {
        // TODO: update the code to test the property userInfo
        expect(instance).to.have.property('userInfo');
        // expect(instance.userInfo).to.be(expectedValueLiteral);
      });

    });
  });

}));
