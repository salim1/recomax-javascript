/*
 * Recomax REST API
 * Recomax REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@recomax.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RecomaxRestApi);
  }
}(this, function(expect, RecomaxRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Locale', function() {
      beforeEach(function() {
        instance = new RecomaxRestApi.Locale();
      });

      it('should create an instance of Locale', function() {
        // TODO: update the code to test Locale
        expect(instance).to.be.a(RecomaxRestApi.Locale);
      });

      it('should have the property country (base name: "country")', function() {
        // TODO: update the code to test the property country
        expect(instance).to.have.property('country');
        // expect(instance.country).to.be(expectedValueLiteral);
      });

      it('should have the property displayCountry (base name: "displayCountry")', function() {
        // TODO: update the code to test the property displayCountry
        expect(instance).to.have.property('displayCountry');
        // expect(instance.displayCountry).to.be(expectedValueLiteral);
      });

      it('should have the property displayLanguage (base name: "displayLanguage")', function() {
        // TODO: update the code to test the property displayLanguage
        expect(instance).to.have.property('displayLanguage');
        // expect(instance.displayLanguage).to.be(expectedValueLiteral);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property displayScript (base name: "displayScript")', function() {
        // TODO: update the code to test the property displayScript
        expect(instance).to.have.property('displayScript');
        // expect(instance.displayScript).to.be(expectedValueLiteral);
      });

      it('should have the property displayVariant (base name: "displayVariant")', function() {
        // TODO: update the code to test the property displayVariant
        expect(instance).to.have.property('displayVariant');
        // expect(instance.displayVariant).to.be(expectedValueLiteral);
      });

      it('should have the property extensionKeys (base name: "extensionKeys")', function() {
        // TODO: update the code to test the property extensionKeys
        expect(instance).to.have.property('extensionKeys');
        // expect(instance.extensionKeys).to.be(expectedValueLiteral);
      });

      it('should have the property iso3Country (base name: "iso3Country")', function() {
        // TODO: update the code to test the property iso3Country
        expect(instance).to.have.property('iso3Country');
        // expect(instance.iso3Country).to.be(expectedValueLiteral);
      });

      it('should have the property iso3Language (base name: "iso3Language")', function() {
        // TODO: update the code to test the property iso3Language
        expect(instance).to.have.property('iso3Language');
        // expect(instance.iso3Language).to.be(expectedValueLiteral);
      });

      it('should have the property language (base name: "language")', function() {
        // TODO: update the code to test the property language
        expect(instance).to.have.property('language');
        // expect(instance.language).to.be(expectedValueLiteral);
      });

      it('should have the property script (base name: "script")', function() {
        // TODO: update the code to test the property script
        expect(instance).to.have.property('script');
        // expect(instance.script).to.be(expectedValueLiteral);
      });

      it('should have the property unicodeLocaleAttributes (base name: "unicodeLocaleAttributes")', function() {
        // TODO: update the code to test the property unicodeLocaleAttributes
        expect(instance).to.have.property('unicodeLocaleAttributes');
        // expect(instance.unicodeLocaleAttributes).to.be(expectedValueLiteral);
      });

      it('should have the property unicodeLocaleKeys (base name: "unicodeLocaleKeys")', function() {
        // TODO: update the code to test the property unicodeLocaleKeys
        expect(instance).to.have.property('unicodeLocaleKeys');
        // expect(instance.unicodeLocaleKeys).to.be(expectedValueLiteral);
      });

      it('should have the property variant (base name: "variant")', function() {
        // TODO: update the code to test the property variant
        expect(instance).to.have.property('variant');
        // expect(instance.variant).to.be(expectedValueLiteral);
      });

    });
  });

}));
