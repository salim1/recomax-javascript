/*
 * Recomax REST API
 * Recomax REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@recomax.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RecomaxRestApi);
  }
}(this, function(expect, RecomaxRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Response', function() {
      beforeEach(function() {
        instance = new RecomaxRestApi.Response();
      });

      it('should create an instance of Response', function() {
        // TODO: update the code to test Response
        expect(instance).to.be.a(RecomaxRestApi.Response);
      });

      it('should have the property allowedMethods (base name: "allowedMethods")', function() {
        // TODO: update the code to test the property allowedMethods
        expect(instance).to.have.property('allowedMethods');
        // expect(instance.allowedMethods).to.be(expectedValueLiteral);
      });

      it('should have the property cookies (base name: "cookies")', function() {
        // TODO: update the code to test the property cookies
        expect(instance).to.have.property('cookies');
        // expect(instance.cookies).to.be(expectedValueLiteral);
      });

      it('should have the property _date (base name: "date")', function() {
        // TODO: update the code to test the property _date
        expect(instance).to.have.property('_date');
        // expect(instance._date).to.be(expectedValueLiteral);
      });

      it('should have the property entity (base name: "entity")', function() {
        // TODO: update the code to test the property entity
        expect(instance).to.have.property('entity');
        // expect(instance.entity).to.be(expectedValueLiteral);
      });

      it('should have the property entityTag (base name: "entityTag")', function() {
        // TODO: update the code to test the property entityTag
        expect(instance).to.have.property('entityTag');
        // expect(instance.entityTag).to.be(expectedValueLiteral);
      });

      it('should have the property headers (base name: "headers")', function() {
        // TODO: update the code to test the property headers
        expect(instance).to.have.property('headers');
        // expect(instance.headers).to.be(expectedValueLiteral);
      });

      it('should have the property language (base name: "language")', function() {
        // TODO: update the code to test the property language
        expect(instance).to.have.property('language');
        // expect(instance.language).to.be(expectedValueLiteral);
      });

      it('should have the property lastModified (base name: "lastModified")', function() {
        // TODO: update the code to test the property lastModified
        expect(instance).to.have.property('lastModified');
        // expect(instance.lastModified).to.be(expectedValueLiteral);
      });

      it('should have the property length (base name: "length")', function() {
        // TODO: update the code to test the property length
        expect(instance).to.have.property('length');
        // expect(instance.length).to.be(expectedValueLiteral);
      });

      it('should have the property links (base name: "links")', function() {
        // TODO: update the code to test the property links
        expect(instance).to.have.property('links');
        // expect(instance.links).to.be(expectedValueLiteral);
      });

      it('should have the property location (base name: "location")', function() {
        // TODO: update the code to test the property location
        expect(instance).to.have.property('location');
        // expect(instance.location).to.be(expectedValueLiteral);
      });

      it('should have the property mediaType (base name: "mediaType")', function() {
        // TODO: update the code to test the property mediaType
        expect(instance).to.have.property('mediaType');
        // expect(instance.mediaType).to.be(expectedValueLiteral);
      });

      it('should have the property metadata (base name: "metadata")', function() {
        // TODO: update the code to test the property metadata
        expect(instance).to.have.property('metadata');
        // expect(instance.metadata).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property statusInfo (base name: "statusInfo")', function() {
        // TODO: update the code to test the property statusInfo
        expect(instance).to.have.property('statusInfo');
        // expect(instance.statusInfo).to.be(expectedValueLiteral);
      });

      it('should have the property stringHeaders (base name: "stringHeaders")', function() {
        // TODO: update the code to test the property stringHeaders
        expect(instance).to.have.property('stringHeaders');
        // expect(instance.stringHeaders).to.be(expectedValueLiteral);
      });

    });
  });

}));
